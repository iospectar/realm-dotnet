name: windows8.1-testing
on:
  workflow_dispatch

jobs:

  build-wrappers-windows:
    runs-on: windows-latest
    name: Wrappers Windows
    strategy:
      matrix:
        arch:
        - Win32
        - x64
    steps:
    - name: Disable Analytics
      run: |
        echo "REALM_DISABLE_ANALYTICS=true" >> $GITHUB_ENV
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Check cache
      id: check-cache
      uses: actions/cache@v2
      with:
        path: ./wrappers/build/**
        key: wrappers-windows-${{ matrix.arch }}-Release-${{ github.event_name != 'pull_request' && 'ON' || 'OFF' }}-${{hashFiles('./wrappers/**')}}
    - name: Install Windows 8.1 SDK
      run: |
        Invoke-WebRequest -Method Get -Uri https://go.microsoft.com/fwlink/p/?LinkId=323507 -OutFile sdksetup.exe -UseBasicParsing
        Start-Process -Wait sdksetup.exe -ArgumentList "/q", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit", "OptionId.NetFxSoftwareDevelopmentKit"
      shell: powershell
    - name: Check Vcpkg cache
      id: check-vcpkg-cache
      uses: actions/cache@v2
      with:
        path: C:\src
        key: vcpkg
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Setup Vcpkg
      run: |
        Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
        Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
      shell: powershell
      if: steps.check-cache.outputs.cache-hit != 'true' && steps.check-vcpkg-cache.outputs.cache-hit != 'true'
    - name: Build wrappers
      run: powershell ./wrappers/build.ps1 Windows -Platforms ${{ matrix.arch }} -Configuration Release${{ github.event_name != 'pull_request' && ' -EnableLTO' || '' }}
      if: steps.check-cache.outputs.cache-hit != 'true'
    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wrappers-windows-${{ matrix.arch }}
        path: wrappers/build/**
        retention-days: 1

  build-packages:
  runs-on: windows-latest
  name: Package
  needs:
  - build-wrappers-windows
  - build-wrappers-windows-uwp
  outputs:
      package_version: ${{ steps.find-nupkg-version.outputs.package_version }}
    steps:
    - name: Disable Analytics
      run: |
        echo "REALM_DISABLE_ANALYTICS=true" >> $GITHUB_ENV
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Disable Analytics
      run: |
        echo "REALM_DISABLE_ANALYTICS=true" >> $GITHUB_ENV
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Set version suffix
      id: set-version-suffix
      run: |
        $suffix = ""
        if ($env:GITHUB_EVENT_NAME -eq "pull_request")
        {
          if (-Not $env:GITHUB_REF.Contains("release"))
          {
            $suffix = "PR-${{ github.event.number }}.$env:GITHUB_RUN_NUMBER"
          }
        }
        else
        {
          $suffix = "alpha.$env:GITHUB_RUN_NUMBER"
        }
        echo "::set-output name=build_suffix::$suffix"
    - name: Fetch artifacts for macos
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        branch: ${{ github.ref }}
        name: wrappers-macos
        path: wrappers/build/
    - name: Fetch artifacts for ios
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        branch: ${{ github.ref }}
        name: wrappers-ios
        path: wrappers/build
    - name: Fetch artifacts for linux
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        branch: ${{ github.ref }}
        name: wrappers-linux
        path: wrappers/build
    - name: Fetch artifacts for android-armeabi-v7a
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        branch: ${{ github.ref }}
        name: wrappers-android-armeabi-v7a
        path: wrappers/build
    - name: Fetch artifacts for android-arm64-v8a
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        branch: ${{ github.ref }}
        name: wrappers-android-arm64-v8a
        path: wrappers/build
    - name: Fetch artifacts for android-x86
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        branch: ${{ github.ref }}
        name: wrappers-android-x86
        path: wrappers/build
    - name: Fetch artifacts for android-x86_64
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        branch: ${{ github.ref }}
        name: wrappers-android-x86_64
        path: wrappers/build
    - name: Fetch artifacts for windows-Win32
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-Win32
        path: wrappers/build
    - name: Fetch artifacts for windows-x64
      uses: actions/download-artifact@v2
      with:
        name: wrappers-windows-x64
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-Win32
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        branch: ${{ github.ref }}
        name: wrappers-windows-uwp-Win32
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-x64
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        branch: ${{ github.ref }}
        name: wrappers-windows-uwp-x64
        path: wrappers/build
    - name: Fetch artifacts for windows-uwp-ARM
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: main.yml
        branch: ${{ github.ref }}
        name: wrappers-windows-uwp-ARM
        path: wrappers/build
    - name: Build Realm/Realm.Fody
      run: msbuild Realm/Realm.Fody -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Build Realm/Realm
      run: msbuild Realm/Realm -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    # - name: Build Realm/Realm.UnityUtils
    #   run: msbuild Realm/Realm.UnityUtils -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    # - name: Build Realm/Realm.UnityWeaver
    #   run: msbuild Realm/Realm.UnityWeaver -t:Pack -p:Configuration=Release -restore -p:PackageOutputPath=${{ github.workspace }}/Realm/packages -p:VersionSuffix=${{ steps.set-version-suffix.outputs.build_suffix }}
    - name: Find nupkg version
      id: find-nupkg-version
      run: |
        cd Realm/packages
        tmpName=$(basename Realm.Fody* .nupkg)
        pkgName=${tmpName#"Realm.Fody."}
        echo "::set-output name=package_version::$pkgName"
      shell: bash
    - name: Store artifacts for Realm.Fody
      uses: actions/upload-artifact@v2
      with:
        name: Realm.Fody.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/Realm.Fody.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}
    - name: Store artifacts for Realm
      uses: actions/upload-artifact@v2
      with:
        name: Realm.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/Realm.${{ steps.find-nupkg-version.outputs.package_version }}.nupkg
        retention-days: ${{ github.event_name != 'pull_request' && 30 || 1 }}

  run-dotnet-tests:
    runs-on: windows-latest
    name: Test .NET Framework
    needs: build-packages
    steps:
    - name: Disable Analytics
      run: |
        echo "REALM_DISABLE_ANALYTICS=true" >> $GITHUB_ENV
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: false
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Register csc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/csc.json"
    - name: Register msvc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/msvc.json"
    - name: Fetch Realm
      uses: actions/download-artifact@v2
      with:
        name: Realm.${{ needs.build-packages.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/
    - name: Fetch Realm.Fody
      uses: actions/download-artifact@v2
      with:
        name: Realm.Fody.${{ needs.build-packages.outputs.package_version }}.nupkg
        path: ${{ github.workspace }}/Realm/packages/
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Build Tests/Realm.Tests
      run: msbuild Tests/Realm.Tests -p:Configuration=Release -restore -p:RestoreConfigFile=Tests/Test.NuGet.Config -p:UseRealmNupkgsWithVersion=${{ needs.build-packages.outputs.package_version }} -p:TargetFramework=net461
    - name: Run the tests
      run: ./Tests/Realm.Tests/bin/Release/net461/Realm.Tests.exe --result=TestResults.Windows.xml --labels=After
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: TestResults.Windows8.1.xml
        comment_mode: "off"
        check_name: Results .NET Framework